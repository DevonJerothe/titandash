"""
titandash.py

Consolidate and put any functionality used or required by the gui here.

The gui is used to begin the server process. And a system tray icon is initialized
with a menu inside tha can be used to restart, stop or migrate the server.
"""
import PySimpleGUIWx as sg
import os
import sys
import subprocess
import webbrowser

import win32gui
import win32con

# Hiding the python window if specified.
if '--hide' in sys.argv:
    program = win32gui.GetForegroundWindow()
    win32gui.ShowWindow(program, win32con.SW_HIDE)


# Default environment variable to ensure proper settings are used.
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "titanbot.settings")


class TitandashTrayApp(object):
    """
    Encapsulate all system tray application functionality into a class instance.
    """
    # Generic
    TITANDASH = "Titandash 1.5.0"
    START_SERVER = "Start"
    STOP_SERVER = "Stop"
    STATIC = "Collect"
    OPEN_DATABASE = "Open"
    MIGRATE = "Migrate"
    GITHUB = "Github"
    EXIT = "Exit"
    ACTIVATED = "__ACTIVATED__"
    DASHBOARD_URL = "http://localhost:8000"
    GITHUB_URL = "https://github.com/becurrie/titandash"
    ICON_BASE64 = ""

    def __init__(self):
        # Store a boolean to determine if the tray is in a working state.
        # When certain errors occur, we can terminate the while loop with
        # this boolean.
        self.stat = True

        # Main system tray object.
        self.tray = sg.SystemTray(menu=self.menu(server_online=True), tooltip=self.TITANDASH, data_base64=self.ICON_BASE64)
        self.message("Initializing", "Starting %s" % self.TITANDASH)

        # Always make sure the server is killed before attempting to start it again.
        # We don"t want any port conflicts so the server is restarted on start.
        status = self.kill_server()

        # Error occurred while shutting down server.
        if not status:
            self.stat = False
            self.message("Error", "Error Occurred While Terminating Server")
        else:
            self.start_server()
            self.message("Initialized", "Started %s" % self.TITANDASH)

    def message(self, title, message, time=2000):
        """
        Send a message through the system tray icon with some information.
        """
        self.tray.ShowMessage(
            title=title,
            message=message,
            time=time
        )

    def menu(self, server_online):
        return [
            self.TITANDASH,
            [
                self.TITANDASH,
                "---",
                "Server", ["!" + self.START_SERVER if server_online else self.START_SERVER, "!" + self.STOP_SERVER if not server_online else self.STOP_SERVER],
                "Database", [self.OPEN_DATABASE, self.MIGRATE],
                "Static", [self.STATIC],
                self.GITHUB,
                "---",
                self.EXIT
            ]
        ]

    @staticmethod
    def get_server_procs():
        netstat = subprocess.Popen(["netstat", "-a", "-n", "-o"], stdout=subprocess.PIPE)
        try:
            output = subprocess.check_output(["findstr", ":8000"], stdin=netstat.stdout)

        # If no output is returned from server procs call.
        # Safe to assume server has been terminated.
        except subprocess.CalledProcessError:
            return []

        # Parse output.
        output = output.decode().replace("\r", "").split("\n")

        parsed = []
        for line in output:
            line = line.split(" ")
            line = [elem for elem in line if elem != ""]
            line = [l.replace(" ", "") for l in line]

            try:
                if ":8000" in line[1]:
                    parsed.append(line)

            # IndexError may occur when some trailing output is present
            # in the lines available for server processes. We can ignore this.
            except IndexError:
                continue

        return parsed

    def kill_server(self):
        """
        Attempting to kill the server process if one exists. Existing if fails numerous times.
        """
        # On top of killing the server, the external auth reference should also
        # be set to offline.
        subprocess.run((["python", "manage.py", "offline"]))

        # Server termination loop.
        attempts = 0
        while attempts < 25:
            attempts += 1
            procs = self.get_server_procs()

            # Break if server is killed.
            if len(procs) == 0:
                return True
            # If the current server is in a state other than listening,
            # we can assume the server has been killed.
            if procs[0][3] != "LISTENING":
                return True

            pid = procs[0][4]

            # Attempt to kill the server with the pid discovered.
            subprocess.run(["taskkill", "/F", "/PID", pid])

    @staticmethod
    def start_server():
        """
        Send out the process that will start the django server.
        """
        return subprocess.Popen(["python", "manage.py", "runserver", "8000"])

    @staticmethod
    def explore_database():
        """
        Open the database in windows explorer. This may prove useful when looking to backup the database.
        """
        return os.startfile(os.path.dirname(os.path.abspath(__file__)))

    @staticmethod
    def makemigrations():
        """
        Run a makemigrations command in Django.
        """
        return subprocess.check_output(["python", "manage.py", "makemigrations"])

    @staticmethod
    def migrate():
        """
        Run a migrate command in Django.
        """
        output = subprocess.check_output(["python", "manage.py", "migrate"])
        output = output.decode().replace("\r", "").split("\n")

        none = False
        for line in output:
            if "No migrations to apply." in line:
                none = True
                break

        if none:
            return "Migrations Are Upto Date"
        else:
            return "Migrations Successfully Applied"

    @staticmethod
    def collectstatic():
        """
        Run a collect static command and return the amount of files collected.
        """
        output = subprocess.check_output(["python", "manage.py", "collectstatic", "--noinput"])
        return output.decode().replace("\r", "").replace("\n", "").split(" ")[0]

    def start(self):
        """
        Start system tray functionality. The server is started by default before the tray is initialized.
        """
        # Begin event loop. Waiting on actions from user to perform functionality.
        # Server should be running at this point.
        while True:
            event = self.tray.Read()

            # EXIT: Exit titandash application, destroying server in the process.
            if event == self.EXIT:
                self.message("Terminating", "Terminating Server Now")

                # Attempt to kill the server before exit.
                if self.kill_server():
                    self.message("Terminated", "Server Terminated Successfully")
                    self.message("Exiting", "Exiting Now")

                # Break after regardless of success, tearing down app.
                break

            # ACTIVATED: Open up the dashboard system.
            # localhost:8000
            if event in [self.ACTIVATED, self.TITANDASH]:
                webbrowser.open_new_tab(self.DASHBOARD_URL)

            # START_SERVER: Start the backend server.
            if event == self.START_SERVER:
                self.message("Initializing", "Starting %s" % self.TITANDASH)
                self.kill_server()
                self.start_server()
                self.message("Initialized", "Started %s" % self.TITANDASH)

                # Update the tray object so that the menu used disables
                # the ability to start the server if it's already running.
                self.tray.Update(menu=self.menu(server_online=True))

            # STOP_SERVER: Stop the backend server.
            if event == self.STOP_SERVER:
                self.message("Terminating", "Terminating Server Now")
                self.kill_server()
                self.message("Terminated", "Server Terminated Successfully")

                # Update the tray object so that the menu used disabled
                # the ability to stop the server it it's already terminated.
                self.tray.Update(menu=self.menu(server_online=False))

            # OPEN_DATABASE: Open the directory containing the users database in explorer.
            if event == self.OPEN_DATABASE:
                self.explore_database()

            # MIGRATE: Perform a database migration.
            # We also perform a quick makemigrations as well so we are upto date.
            if event == self.MIGRATE:
                self.message("Migrate", "Performing Database Migration Now")
                self.makemigrations()
                migrate = self.migrate()
                self.message("Migrate", migrate)

            if event == self.STATIC:
                self.message("Static Files", "Collecting Static Files Now")
                collected = self.collectstatic()
                self.message("Static Files", "%s Static File(s) Were Collected" % collected)

            # GITHUB: Open up the github repository.
            if event == self.GITHUB:
                webbrowser.open_new_tab(self.GITHUB_URL)


TitandashTrayApp().start()
